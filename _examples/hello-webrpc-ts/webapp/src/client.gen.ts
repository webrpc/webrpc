/* tslint:disable */
// hello-webrpc v1.0.0
// --
// This file has been generated by https://github.com/webrpc/webrpc using gen/typescript
// Do not edit by hand. Update your webrpc schema and re-generate.


export enum Kind {
  USER = 'USER',
  ADMIN = 'ADMIN'
}

export interface User {
  id: number
  USERNAME: string
  role: Kind
  meta: {[key: string]: any}
  
  created_at?: string
}

export interface Page {
  num: number
}

export interface ExampleService {
  ping(headers: object): Promise<PingReturn>
  getUser(args: GetUserArgs, headers: object): Promise<GetUserReturn>
  findUsers(args: FindUsersArgs, headers: object): Promise<FindUsersReturn>
}

export interface PingArgs {
}

export interface PingReturn {
  status: boolean  
}
export interface GetUserArgs {
  userID: number
}

export interface GetUserReturn {
  user: User  
}
export interface FindUsersArgs {
  q: string
}

export interface FindUsersReturn {
  page: Page
  users: Array<User>  
}


  
// Client
export class ExampleService implements ExampleService {
  private hostname: string
  private fetch: Fetch
  private path = '/rpc/ExampleService/'

  constructor(hostname: string, fetch: Fetch) {
    this.hostname = hostname
    this.fetch = fetch
  }

  private url(name: string): string {
    return this.hostname + this.path + name
  }
  
  ping(headers: object = {}): Promise<PingReturn> {
    return this.fetch(
      this.url('Ping'),
      
      createHTTPRequest({}, headers)
      
    ).then((res) => {
      if (!res.ok) {
        return throwHTTPError(res)
      }
      return res.json().then((_data) => {
        return {
          status: <boolean>(_data.status)
        }
      })
    })
  }
  
  getUser(args: GetUserArgs, headers: object = {}): Promise<GetUserReturn> {
    return this.fetch(
      this.url('GetUser'),
      
      createHTTPRequest(args, headers)
      
    ).then((res) => {
      if (!res.ok) {
        return throwHTTPError(res)
      }
      return res.json().then((_data) => {
        return {
          user: <User>(_data.user)
        }
      })
    })
  }
  
  findUsers(args: FindUsersArgs, headers: object = {}): Promise<FindUsersReturn> {
    return this.fetch(
      this.url('FindUsers'),
      
      createHTTPRequest(args, headers)
      
    ).then((res) => {
      if (!res.ok) {
        return throwHTTPError(res)
      }
      return res.json().then((_data) => {
        return {
          page: <Page>(_data.page), 
          users: <Array<User>>(_data.users)
        }
      })
    })
  }
  
}


export interface WebRPCError extends Error {
  code: string
  msg: string
	status: number
}

export const throwHTTPError = (resp: Response) => {
  return resp.json().then((err: WebRPCError) => { throw err })
}

export const throwHTTPError = (resp: Response) => {
  return resp.text().then(text => {
    try {
      const err = JSON.parse(text)

      throw err
    } catch (err) {
      throw new Error(text);
    }
  })
}

export type Fetch = (input: RequestInfo, init?: RequestInit) => Promise<Response>
