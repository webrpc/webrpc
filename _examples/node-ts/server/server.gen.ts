/* eslint-disable */
// node-ts v1.0.0 21701cae51b73d035bf2180831cdb38220bbbccc
// --
// Code generated by Webrpc-gen@v0.28.2-7-g684024c with typescript generator. DO NOT EDIT.
//
// webrpc-gen -schema=service.ridl -target=typescript -server -out=./server/server.gen.ts

// Webrpc description and code-gen version
export const WebrpcVersion = "v1"

// Schema version of your RIDL schema
export const WebrpcSchemaVersion = "v1.0.0"

// Schema hash generated from your RIDL schema
export const WebrpcSchemaHash = "21701cae51b73d035bf2180831cdb38220bbbccc"


//
// Server interface
//

export interface ExampleServer<Context = unknown> {
  ping(ctx: Context, req: PingRequest): Promise<PingResponse>
  getUser(ctx: Context, req: GetUserRequest): Promise<GetUserResponse>
  getArticle(ctx: Context, req: GetArticleRequest): Promise<GetArticleResponse>
}

//
// Schema types
//

export enum Kind {
  USER = 'USER',
  ADMIN = 'ADMIN'
}

export interface User {
  id: number
  USERNAME: string
  role: Kind
  meta: {[key: string]: any}
  createdAt?: string
}

export interface Page {
  num: number
}

export interface GetArticleRequest {
  articleId: number
}

export interface GetArticleResponse {
  title: string
  content?: string
}

export interface PingRequest {
}

export interface PingResponse {
}

export interface GetUserRequest {
  userId: number
}

export interface GetUserResponse {
  code: number
  user: User
}





//
// Server handler
//

export const serveExampleRpc = async <Context>(service: ExampleServer<Context>, ctx: Context, urlPath: string, body: any) => {
  if (!urlPath.startsWith('/rpc/')) return null
  const parts = urlPath.split('/').filter(Boolean)
  if (parts.length !== 3 || parts[0] !== 'rpc' || parts[1] !== 'Example') return null
  const method = parts[2]
  try {
    const result = await dispatchExampleRequest(service, ctx, method, body)
    return {
      method,
      status: 200,
      headers: { [WebrpcHeader]: WebrpcHeaderValue, 'Content-Type': 'application/json' },
      body: result ?? {}
    }
  } catch (err: any) {
    if (err instanceof WebrpcError) {
      const status = err.status || 400
      return {
        method,
        status,
        headers: { [WebrpcHeader]: WebrpcHeaderValue, 'Content-Type': 'application/json' },
        body: err
      }
    } else {
      return {
        method,
        status: 400,
        headers: { [WebrpcHeader]: WebrpcHeaderValue, 'Content-Type': 'application/json' },
        body: new WebrpcError({ message: err?.message })
      }
    }
  }
}

const dispatchExampleRequest = async <Context>(service: ExampleServer<Context>, ctx: Context, method: string, payload: any) => {
  switch (method) {
    case 'Ping':
      return service.ping(ctx, payload || {})
  
    case 'GetUser':
      if (!("userId" in payload)) {
        throw new WebrpcBadRequestError({ cause: "missing argument `userId`" })
      }
      if ("userId" in payload && !validateType(payload["userId"], "number")) {
        throw new WebrpcBadRequestError({ cause: "invalid argument: userId" })
      }
      return service.getUser(ctx, payload || {})
  
    case 'GetArticle':
      if (payload && !validateType(payload, "GetArticleRequest")) {
        throw new WebrpcBadRequestError({ cause: "invalid argument: getArticleRequest" })
      }
      return service.getArticle(ctx, payload || {})
  
    default:
      throw new WebrpcBadRouteError({ cause: 'method not found' })
  }
}



//
// Server type validators
//

const JS_TYPES = [
    "bigint",
    "boolean",
    "function",
    "number",
    "object",
    "string",
    "symbol",
    "undefined"
]

const validateKind = (value: any) => {
  if (!("USER" in value) || !validateType(value["USER"], "number")) {
    return false
  }
  if (!("ADMIN" in value) || !validateType(value["ADMIN"], "number")) {
    return false
  }
  return true
}

const validateUser = (value: any) => {
  if (!("id" in value) || !validateType(value["id"], "number")) {
    return false
  }
  if (!("USERNAME" in value) || !validateType(value["USERNAME"], "string")) {
    return false
  }
  if (!("role" in value) || !validateType(value["role"], "Kind")) {
    return false
  }
  if (!("meta" in value) || !validateType(value["meta"], "object")) {
    return false
  }
  if (!("-" in value) || !validateType(value["-"], "number")) {
    return false
  }
  if ("createdAt" in value && !validateType(value["createdAt"], "string")) {
    return false
  }
  return true
}

const validatePage = (value: any) => {
  if (!("num" in value) || !validateType(value["num"], "number")) {
    return false
  }
  return true
}

const validateGetArticleRequest = (value: any) => {
  if (!("articleId" in value) || !validateType(value["articleId"], "number")) {
    return false
  }
  return true
}

const validateGetArticleResponse = (value: any) => {
  if (!("title" in value) || !validateType(value["title"], "string")) {
    return false
  }
  if ("content" in value && !validateType(value["content"], "string")) {
    return false
  }
  return true
}

const TYPE_VALIDATORS: { [type: string]: (value: any) => boolean } = {
  Kind: validateKind,
  User: validateUser,
  Page: validatePage,
  GetArticleRequest: validateGetArticleRequest,
  GetArticleResponse: validateGetArticleResponse,
}

const validateType = (value: any, type: string) => {
  if (JS_TYPES.indexOf(type) > -1) {
    return typeof value === type;
  }
  const validator = TYPE_VALIDATORS[type];
  if (!validator) {
    return false;
  }
  return validator(value)
}

//
// Errors
//

type WebrpcErrorParams = { name?: string, code?: number, message?: string, status?: number, cause?: string }

export class WebrpcError extends Error {
  name: string
  code: number
  message: string
  status: number
  cause?: string

  constructor(error: WebrpcErrorParams = {}) {
    super(error.message)
    this.name = error.name || 'WebrpcEndpointError'
    this.code = typeof error.code === 'number' ? error.code : 0
    this.message = error.message || `endpoint error`
    this.status = typeof error.status === 'number' ? error.status : 400
    this.cause = error.cause
    Object.setPrototypeOf(this, WebrpcError.prototype)
  }

  static new(payload: any): WebrpcError {
    return new this({ message: payload.message, code: payload.code, status: payload.status, cause: payload.cause })
  }
}


export class WebrpcEndpointError extends WebrpcError {
  constructor(error: WebrpcErrorParams = {}) {
    super(error)
    this.name = error.name || 'WebrpcEndpoint'
    this.code = typeof error.code === 'number' ? error.code : 0
    this.message = error.message || `endpoint error`
    this.status = typeof error.status === 'number' ? error.status : 400
    this.cause = error.cause
    Object.setPrototypeOf(this, WebrpcEndpointError.prototype)
  }
}

export class WebrpcRequestFailedError extends WebrpcError {
  constructor(error: WebrpcErrorParams = {}) {
    super(error)
    this.name = error.name || 'WebrpcRequestFailed'
    this.code = typeof error.code === 'number' ? error.code : -1
    this.message = error.message || `request failed`
    this.status = typeof error.status === 'number' ? error.status : 400
    this.cause = error.cause
    Object.setPrototypeOf(this, WebrpcRequestFailedError.prototype)
  }
}

export class WebrpcBadRouteError extends WebrpcError {
  constructor(error: WebrpcErrorParams = {}) {
    super(error)
    this.name = error.name || 'WebrpcBadRoute'
    this.code = typeof error.code === 'number' ? error.code : -2
    this.message = error.message || `bad route`
    this.status = typeof error.status === 'number' ? error.status : 404
    this.cause = error.cause
    Object.setPrototypeOf(this, WebrpcBadRouteError.prototype)
  }
}

export class WebrpcBadMethodError extends WebrpcError {
  constructor(error: WebrpcErrorParams = {}) {
    super(error)
    this.name = error.name || 'WebrpcBadMethod'
    this.code = typeof error.code === 'number' ? error.code : -3
    this.message = error.message || `bad method`
    this.status = typeof error.status === 'number' ? error.status : 405
    this.cause = error.cause
    Object.setPrototypeOf(this, WebrpcBadMethodError.prototype)
  }
}

export class WebrpcBadRequestError extends WebrpcError {
  constructor(error: WebrpcErrorParams = {}) {
    super(error)
    this.name = error.name || 'WebrpcBadRequest'
    this.code = typeof error.code === 'number' ? error.code : -4
    this.message = error.message || `bad request`
    this.status = typeof error.status === 'number' ? error.status : 400
    this.cause = error.cause
    Object.setPrototypeOf(this, WebrpcBadRequestError.prototype)
  }
}

export class WebrpcBadResponseError extends WebrpcError {
  constructor(error: WebrpcErrorParams = {}) {
    super(error)
    this.name = error.name || 'WebrpcBadResponse'
    this.code = typeof error.code === 'number' ? error.code : -5
    this.message = error.message || `bad response`
    this.status = typeof error.status === 'number' ? error.status : 500
    this.cause = error.cause
    Object.setPrototypeOf(this, WebrpcBadResponseError.prototype)
  }
}

export class WebrpcServerPanicError extends WebrpcError {
  constructor(error: WebrpcErrorParams = {}) {
    super(error)
    this.name = error.name || 'WebrpcServerPanic'
    this.code = typeof error.code === 'number' ? error.code : -6
    this.message = error.message || `server panic`
    this.status = typeof error.status === 'number' ? error.status : 500
    this.cause = error.cause
    Object.setPrototypeOf(this, WebrpcServerPanicError.prototype)
  }
}

export class WebrpcInternalErrorError extends WebrpcError {
  constructor(error: WebrpcErrorParams = {}) {
    super(error)
    this.name = error.name || 'WebrpcInternalError'
    this.code = typeof error.code === 'number' ? error.code : -7
    this.message = error.message || `internal error`
    this.status = typeof error.status === 'number' ? error.status : 500
    this.cause = error.cause
    Object.setPrototypeOf(this, WebrpcInternalErrorError.prototype)
  }
}

export class WebrpcClientAbortedError extends WebrpcError {
  constructor(error: WebrpcErrorParams = {}) {
    super(error)
    this.name = error.name || 'WebrpcClientAborted'
    this.code = typeof error.code === 'number' ? error.code : -8
    this.message = error.message || `request aborted by client`
    this.status = typeof error.status === 'number' ? error.status : 400
    this.cause = error.cause
    Object.setPrototypeOf(this, WebrpcClientAbortedError.prototype)
  }
}

export class WebrpcStreamLostError extends WebrpcError {
  constructor(error: WebrpcErrorParams = {}) {
    super(error)
    this.name = error.name || 'WebrpcStreamLost'
    this.code = typeof error.code === 'number' ? error.code : -9
    this.message = error.message || `stream lost`
    this.status = typeof error.status === 'number' ? error.status : 400
    this.cause = error.cause
    Object.setPrototypeOf(this, WebrpcStreamLostError.prototype)
  }
}

export class WebrpcStreamFinishedError extends WebrpcError {
  constructor(error: WebrpcErrorParams = {}) {
    super(error)
    this.name = error.name || 'WebrpcStreamFinished'
    this.code = typeof error.code === 'number' ? error.code : -10
    this.message = error.message || `stream finished`
    this.status = typeof error.status === 'number' ? error.status : 200
    this.cause = error.cause
    Object.setPrototypeOf(this, WebrpcStreamFinishedError.prototype)
  }
}


//
// Schema errors
//

export class UnauthorizedError extends WebrpcError {
  constructor(error: WebrpcErrorParams = {}) {
    super(error)
    this.name = error.name || 'Unauthorized'
    this.code = typeof error.code === 'number' ? error.code : 1000
    this.message = error.message || `Unauthorized access`
    this.status = typeof error.status === 'number' ? error.status : 401
    this.cause = error.cause
    Object.setPrototypeOf(this, UnauthorizedError.prototype)
  }
}

export class PermissionDeniedError extends WebrpcError {
  constructor(error: WebrpcErrorParams = {}) {
    super(error)
    this.name = error.name || 'PermissionDenied'
    this.code = typeof error.code === 'number' ? error.code : 1001
    this.message = error.message || `Permission denied`
    this.status = typeof error.status === 'number' ? error.status : 403
    this.cause = error.cause
    Object.setPrototypeOf(this, PermissionDeniedError.prototype)
  }
}

export class SessionExpiredError extends WebrpcError {
  constructor(error: WebrpcErrorParams = {}) {
    super(error)
    this.name = error.name || 'SessionExpired'
    this.code = typeof error.code === 'number' ? error.code : 1002
    this.message = error.message || `Session expired`
    this.status = typeof error.status === 'number' ? error.status : 403
    this.cause = error.cause
    Object.setPrototypeOf(this, SessionExpiredError.prototype)
  }
}

export class GeoblockedError extends WebrpcError {
  constructor(error: WebrpcErrorParams = {}) {
    super(error)
    this.name = error.name || 'Geoblocked'
    this.code = typeof error.code === 'number' ? error.code : 1003
    this.message = error.message || `Geoblocked region`
    this.status = typeof error.status === 'number' ? error.status : 451
    this.cause = error.cause
    Object.setPrototypeOf(this, GeoblockedError.prototype)
  }
}

export class RateLimitedError extends WebrpcError {
  constructor(error: WebrpcErrorParams = {}) {
    super(error)
    this.name = error.name || 'RateLimited'
    this.code = typeof error.code === 'number' ? error.code : 1004
    this.message = error.message || `Rate-limited. Please slow down.`
    this.status = typeof error.status === 'number' ? error.status : 429
    this.cause = error.cause
    Object.setPrototypeOf(this, RateLimitedError.prototype)
  }
}

export class CorsDisallowedError extends WebrpcError {
  constructor(error: WebrpcErrorParams = {}) {
    super(error)
    this.name = error.name || 'CorsDisallowed'
    this.code = typeof error.code === 'number' ? error.code : 1005
    this.message = error.message || `CORS disallowed. JWT can't be used from a web app.`
    this.status = typeof error.status === 'number' ? error.status : 403
    this.cause = error.cause
    Object.setPrototypeOf(this, CorsDisallowedError.prototype)
  }
}


export enum errors {
  WebrpcEndpoint = 'WebrpcEndpoint',
  WebrpcRequestFailed = 'WebrpcRequestFailed',
  WebrpcBadRoute = 'WebrpcBadRoute',
  WebrpcBadMethod = 'WebrpcBadMethod',
  WebrpcBadRequest = 'WebrpcBadRequest',
  WebrpcBadResponse = 'WebrpcBadResponse',
  WebrpcServerPanic = 'WebrpcServerPanic',
  WebrpcInternalError = 'WebrpcInternalError',
  WebrpcClientAborted = 'WebrpcClientAborted',
  WebrpcStreamLost = 'WebrpcStreamLost',
  WebrpcStreamFinished = 'WebrpcStreamFinished',
  Unauthorized = 'Unauthorized',
  PermissionDenied = 'PermissionDenied',
  SessionExpired = 'SessionExpired',
  Geoblocked = 'Geoblocked',
  RateLimited = 'RateLimited',
  CorsDisallowed = 'CorsDisallowed',
}

export enum WebrpcErrorCodes {
  WebrpcEndpoint = 0,
  WebrpcRequestFailed = -1,
  WebrpcBadRoute = -2,
  WebrpcBadMethod = -3,
  WebrpcBadRequest = -4,
  WebrpcBadResponse = -5,
  WebrpcServerPanic = -6,
  WebrpcInternalError = -7,
  WebrpcClientAborted = -8,
  WebrpcStreamLost = -9,
  WebrpcStreamFinished = -10,
  Unauthorized = 1000,
  PermissionDenied = 1001,
  SessionExpired = 1002,
  Geoblocked = 1003,
  RateLimited = 1004,
  CorsDisallowed = 1005,
}

export const webrpcErrorByCode: { [code: number]: any } = {
  [0]: WebrpcEndpointError,
  [-1]: WebrpcRequestFailedError,
  [-2]: WebrpcBadRouteError,
  [-3]: WebrpcBadMethodError,
  [-4]: WebrpcBadRequestError,
  [-5]: WebrpcBadResponseError,
  [-6]: WebrpcServerPanicError,
  [-7]: WebrpcInternalErrorError,
  [-8]: WebrpcClientAbortedError,
  [-9]: WebrpcStreamLostError,
  [-10]: WebrpcStreamFinishedError,
  [1000]: UnauthorizedError,
  [1001]: PermissionDeniedError,
  [1002]: SessionExpiredError,
  [1003]: GeoblockedError,
  [1004]: RateLimitedError,
  [1005]: CorsDisallowedError,
}



//
// Webrpc
//

export const WebrpcHeader = "Webrpc"

export const WebrpcHeaderValue = "webrpc@v0.28.2-7-g684024c;gen-typescript@v0.20.2;node-ts@v1.0.0"

type WebrpcGenVersions = {
  WebrpcGenVersion: string;
  codeGenName: string;
  codeGenVersion: string;
  schemaName: string;
  schemaVersion: string;
};

export function VersionFromHeader(headers: Headers): WebrpcGenVersions {
  const headerValue = headers.get(WebrpcHeader)
  if (!headerValue) {
    return {
      WebrpcGenVersion: "",
      codeGenName: "",
      codeGenVersion: "",
      schemaName: "",
      schemaVersion: "",
    };
  }

  return parseWebrpcGenVersions(headerValue)
}

function parseWebrpcGenVersions(header: string): WebrpcGenVersions {
  const versions = header.split(";")
  if (versions.length < 3) {
    return {
      WebrpcGenVersion: "",
      codeGenName: "",
      codeGenVersion: "",
      schemaName: "",
      schemaVersion: "",
    };
  }

  const [_, WebrpcGenVersion] = versions[0]!.split("@")
  const [codeGenName, codeGenVersion] = versions[1]!.split("@")
  const [schemaName, schemaVersion] = versions[2]!.split("@")

  return {
    WebrpcGenVersion: WebrpcGenVersion ?? "",
    codeGenName: codeGenName ?? "",
    codeGenVersion: codeGenVersion ?? "",
    schemaName: schemaName ?? "",
    schemaVersion: schemaVersion ?? "",
  };
}

