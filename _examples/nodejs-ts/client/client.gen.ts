/* tslint:disable */
// example v0.0.1
// --
// This file has been generated by https://github.com/webrpc/webrpc using gen/typescript
// Do not edit by hand. Update your webrpc schema and re-generate.


export enum Kind {
  USER = 'USER',
  ADMIN = 'ADMIN'
}

export interface Empty {
}

export interface User {
  id: number
  USERNAME: string
  role: string
  created_at?: string
}

export interface ComplexType {
  meta: {[key: string]: any}
  metaNestedExample: {[key: string]: {[key: string]: number}}
  namesList: Array<string>
  numsList: Array<number>
  doubleArray: Array<Array<string>>
  listOfMaps: Array<{[key: string]: number}>
  listOfUsers: Array<User>
  mapOfUsers: {[key: string]: User}
  user: User
}

export interface ExampleService {
  ping(headers: object): Promise<PingReturn>
  status(headers: object): Promise<StatusReturn>
  getUser(args: GetUserArgs, headers: object): Promise<GetUserReturn>
}

export interface PingArgs {
}

export interface PingReturn {  
}
export interface StatusArgs {
}

export interface StatusReturn {
  status: boolean  
}
export interface GetUserArgs {
  header: {[key: string]: string}
  userID: number
}

export interface GetUserReturn {
  code: number
  user: User  
}


  
// Client
export class ExampleService implements ExampleService {
  private hostname: string
  private fetch: Fetch
  private path = '/rpc/ExampleService/'

  constructor(hostname: string, fetch: Fetch) {
    this.hostname = hostname
    this.fetch = fetch
  }

  private url(name: string): string {
    return this.hostname + this.path + name
  }
  
  ping(headers: object = {}): Promise<PingReturn> {
    return this.fetch(
      this.url('Ping'),
      
      createHTTPRequest({}, headers)
      
    ).then((res) => {
      if (!res.ok) {
        return throwHTTPError(res)
      }
      return res.json().then((_data) => {
        return {
        }
      })
    })
  }
  
  status(headers: object = {}): Promise<StatusReturn> {
    return this.fetch(
      this.url('Status'),
      
      createHTTPRequest({}, headers)
      
    ).then((res) => {
      if (!res.ok) {
        return throwHTTPError(res)
      }
      return res.json().then((_data) => {
        return {
          status: <boolean>(_data.status)
        }
      })
    })
  }
  
  getUser(args: GetUserArgs, headers: object = {}): Promise<GetUserReturn> {
    return this.fetch(
      this.url('GetUser'),
      
      createHTTPRequest(args, headers)
      
    ).then((res) => {
      if (!res.ok) {
        return throwHTTPError(res)
      }
      return res.json().then((_data) => {
        return {
          code: <number>(_data.code), 
          user: <User>(_data.user)
        }
      })
    })
  }
  
}

  
export interface WebRPCError extends Error {
  code: string
  msg: string
	status: number
}

export const throwHTTPError = (resp: Response) => {
  return resp.json().then((err: WebRPCError) => { throw err })
}

export const createHTTPRequest = (body: object = {}, headers: object = {}): object => {
  return {
    method: 'POST',
    headers: { ...headers, 'Content-Type': 'application/json' },
    body: JSON.stringify(body || {})
  }
}

export type Fetch = (input: RequestInfo, init?: RequestInit) => Promise<Response>
