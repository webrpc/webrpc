/* tslint:disable */
// example v0.0.1
// --
// This file has been generated by https://github.com/webrpc/webrpc using gen/typescript
// Do not edit by hand. Update your webrpc schema and re-generate.


export enum Kind {
  USER = 'USER',
  ADMIN = 'ADMIN'
}

export interface Empty {
}

export interface User {
  id: number
  USERNAME: string
  role: string
  created_at?: string
}

export interface ComplexType {
  meta: {[key: string]: any}
  metaNestedExample: {[key: string]: {[key: string]: number}}
  namesList: Array<string>
  numsList: Array<number>
  doubleArray: Array<Array<string>>
  listOfMaps: Array<{[key: string]: number}>
  listOfUsers: Array<User>
  mapOfUsers: {[key: string]: User}
  user: User
}

export interface ExampleService {
  ping(headers: object): Promise<PingReturn>
  status(headers: object): Promise<StatusReturn>
  getUser(args: GetUserArgs, headers: object): Promise<GetUserReturn>
}

export interface PingArgs {
}

export interface PingReturn {  
}
export interface StatusArgs {
}

export interface StatusReturn {
  status: boolean  
}
export interface GetUserArgs {
  header: {[key: string]: string}
  userID: number
}

export interface GetUserReturn {
  code: number
  user: User  
}


  
// TODO: Server
        
        

import express from 'express'

const app = express()

type FooSvc = {
    Status: (header: {}, userID: number) => User | Promise<User>
}
