

/* tslint:disable */

// This file has been generated by https://github.com/webrpc/webrpc
// Do not edit.



  
    
      
      
        // Kind_USER = uint32 1
      
        // Kind_ADMIN = uint32 2
      
    
    
  
    
    
      export interface IEmpty {
        
        toJSON?(): object
      }

      export class Empty implements IEmpty {
        private _data: IEmpty
        constructor(_data?: IEmpty) {
          this._data = {}
          if (_data) {
            
          }
        }

        

        public toJSON(): object {
          return this._data
        }
      }
    
  
    
    
      export interface IGetUserRequest {
        
          UserID?: number
        
        toJSON?(): object
      }

      export class GetUserRequest implements IGetUserRequest {
        private _data: IGetUserRequest
        constructor(_data?: IGetUserRequest) {
          this._data = {}
          if (_data) {
            
              this._data['UserID'] = _data['UserID']!
            
          }
        }

        
        public get UserID(): number {
          return this._data['UserID']!
        }
        public set UserID(value: number) {
          this._data['UserID'] = value
        }
        

        public toJSON(): object {
          return this._data
        }
      }
    
  
    
    
      export interface IUser {
        
          ID?: number
        
          Username?: string
        
          CreatedAt?: string
        
        toJSON?(): object
      }

      export class User implements IUser {
        private _data: IUser
        constructor(_data?: IUser) {
          this._data = {}
          if (_data) {
            
              this._data['ID'] = _data['ID']!
            
              this._data['Username'] = _data['Username']!
            
              this._data['CreatedAt'] = _data['CreatedAt']!
            
          }
        }

        
        public get ID(): number {
          return this._data['ID']!
        }
        public set ID(value: number) {
          this._data['ID'] = value
        }
        
        public get Username(): string {
          return this._data['Username']!
        }
        public set Username(value: string) {
          this._data['Username'] = value
        }
        
        public get CreatedAt(): string {
          return this._data['CreatedAt']!
        }
        public set CreatedAt(value: string) {
          this._data['CreatedAt'] = value
        }
        

        public toJSON(): object {
          return this._data
        }
      }
    
  
    
    
      export interface IRandomStuff {
        
          Meta?: Map<string,any>
        
          MetaNestedExample?: Map<string,Map<string,number>>
        
          NamesList?: Array<string>
        
          NumsList?: Array<number>
        
          DoubleArray?: Array<Array<string>>
        
          ListOfMaps?: Array<Map<string,number>>
        
          ListOfUsers?: Array<IUser>
        
          MapOfUsers?: Map<string,IUser>
        
          User?: IUser
        
        toJSON?(): object
      }

      export class RandomStuff implements IRandomStuff {
        private _data: IRandomStuff
        constructor(_data?: IRandomStuff) {
          this._data = {}
          if (_data) {
            
              this._data['Meta'] = _data['Meta']!
            
              this._data['MetaNestedExample'] = _data['MetaNestedExample']!
            
              this._data['NamesList'] = _data['NamesList']!
            
              this._data['NumsList'] = _data['NumsList']!
            
              this._data['DoubleArray'] = _data['DoubleArray']!
            
              this._data['ListOfMaps'] = _data['ListOfMaps']!
            
              this._data['ListOfUsers'] = _data['ListOfUsers']!
            
              this._data['MapOfUsers'] = _data['MapOfUsers']!
            
              this._data['User'] = _data['User']!
            
          }
        }

        
        public get Meta(): Map<string,any> {
          return this._data['Meta']!
        }
        public set Meta(value: Map<string,any>) {
          this._data['Meta'] = value
        }
        
        public get MetaNestedExample(): Map<string,Map<string,number>> {
          return this._data['MetaNestedExample']!
        }
        public set MetaNestedExample(value: Map<string,Map<string,number>>) {
          this._data['MetaNestedExample'] = value
        }
        
        public get NamesList(): Array<string> {
          return this._data['NamesList']!
        }
        public set NamesList(value: Array<string>) {
          this._data['NamesList'] = value
        }
        
        public get NumsList(): Array<number> {
          return this._data['NumsList']!
        }
        public set NumsList(value: Array<number>) {
          this._data['NumsList'] = value
        }
        
        public get DoubleArray(): Array<Array<string>> {
          return this._data['DoubleArray']!
        }
        public set DoubleArray(value: Array<Array<string>>) {
          this._data['DoubleArray'] = value
        }
        
        public get ListOfMaps(): Array<Map<string,number>> {
          return this._data['ListOfMaps']!
        }
        public set ListOfMaps(value: Array<Map<string,number>>) {
          this._data['ListOfMaps'] = value
        }
        
        public get ListOfUsers(): Array<IUser> {
          return this._data['ListOfUsers']!
        }
        public set ListOfUsers(value: Array<IUser>) {
          this._data['ListOfUsers'] = value
        }
        
        public get MapOfUsers(): Map<string,IUser> {
          return this._data['MapOfUsers']!
        }
        public set MapOfUsers(value: Map<string,IUser>) {
          this._data['MapOfUsers'] = value
        }
        
        public get User(): IUser {
          return this._data['User']!
        }
        public set User(value: IUser) {
          this._data['User'] = value
        }
        

        public toJSON(): object {
          return this._data
        }
      }
    
  


  
    export interface IExampleServiceService {
      
        Ping(headers: object): Promise<boolean>
      
        GetUser(params: IGetUserRequest, headers: object): Promise<IUser>
      
    }
  





  // Client

  
  const ExampleServicePathPrefix = "/rpc/ExampleService/"
  

  

    export class ExampleService implements IExampleServiceService {
      private hostname: string
      private fetch: Fetch
      private path = '/rpc/ExampleService/'

			constructor(hostname: string, fetch: Fetch) {
				this.hostname = hostname
				this.fetch = fetch
			}

			private url(name: string): string {
				return this.hostname + this.path + name
			}

      
        Ping(headers: object): Promise<boolean> {
					return this.fetch(
						this.url('Ping'),
						
						createHTTPRequest({}, headers)
						
					).then((res) => {
						if (!res.ok) {
							return throwHTTPError(res)
						}
						
							return res.json().then((_data) => {return <boolean>(_data)})
						
					})
				}
      
        GetUser(params: IGetUserRequest, headers: object): Promise<IUser> {
					return this.fetch(
						this.url('GetUser'),
						
						createHTTPRequest(params, headers)
						
					).then((res) => {
						if (!res.ok) {
							return throwHTTPError(res)
						}
						
							return res.json().then((_data) => {return new User(_data)})
						
					})
				}
      
    }

  





  // TODO: Server





export interface WebRPCErrorJSON {
  code: string
  msg: string
  meta: {
    [index: string]: string
  }
}

export class WebRPCError extends Error {
  code: string
  meta: {
    [index: string]: string
  }

  constructor(te: WebRPCErrorJSON) {
    super(te.msg)

    this.code = te.code
    this.meta = te.meta
  }
}

export const throwHTTPError = (resp: Response) => {
  return resp.json().then((err: WebRPCErrorJSON) => { throw new WebRPCError(err) })
}

export const createHTTPRequest = (body: object = {}, headers: object = {}): object => {
  return {
    method: 'POST',
    headers: { ...headers, 'Content-Type': 'application/json' },
    body: JSON.stringify(body || {})
  }
}

export type Fetch = (input: RequestInfo, init?: RequestInit) => Promise<Response>


