webrpc = v1

name = sample
version = v0.0.1


enum Kind: uint32
  - USER = 1
  - ADMIN = 2


message Empty


message User
  - ID: uint64
    + json = id
    + go.tag.db = id

  - username: string
    + json = USERNAME
    + go.tag.db = username

  - role: string
    + go.tag.db = -

  - createdAt?: timestamp
    + json = created_at
    + go.tag.json = created_at,omitempty
    + go.tag.db = created_at


message ComplexType
  - meta: map<string,any>
  - metaNestedExample: map<string,map<string,uint32>>
  - namesList: []string
  - numsList: []int64
  - doubleArray: [][]string
  - listOfMaps: []map<string,uint32>
  - listOfUsers: []User
  - mapOfUsers: map<string,User>
  - user: User


service ExampleRPC
  - Ping()
  - Status() => (status: bool)
  - GetUser(header: map<string,string>, userID: uint64) => (code: uint32, user: User)

service AnotherRPC
  - Owner(q?: string, id?: uint64, desc: string) => (code: uint32, user: User, status?: []string)
