{{define "client"}}
{{- if .Services}}
//
// Client
//

{{- range .Services}}
export class {{.Name}} implements {{.Name | tsServiceInterfaceName}} {
  protected hostname: string
  protected fetch: Fetch
  protected path = '/rpc/{{.Name}}/'

  constructor(hostname: string, fetch: Fetch) {
    this.hostname = hostname
    this.fetch = fetch
  }

  private url(name: string): string {
    return this.hostname + this.path + name
  }
  {{range .Methods}}
  {{.Name | tsMethodName}} = ({{. | tsMethodInputs}}): {{. | tsMethodOutputs}} => {
    return this.fetch(
      this.url('{{.Name}}'),
      {{- if .Inputs | len}}
      createHTTPRequest(args, headers)
      {{- else}}
      createHTTPRequest({}, headers)
      {{end -}}
    ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
        {{- $outputsCount := .Outputs|len -}}
        {{- range $i, $output := .Outputs}}
          {{$output | tsNewOutputArgResponse}}{{listComma $i $outputsCount}}
        {{- end}}
        }
      })
    })
  }
  {{end}}
}
{{end -}}
{{end -}}
{{end}}
