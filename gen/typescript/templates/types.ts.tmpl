{{define "types"}}

{{- if .Messages -}}
{{range .Messages -}}

{{if .Type | isEnum -}}
{{$enumName := .Name}}
export enum {{$enumName}} {
{{- range $i, $field := .Fields}}
  {{- if $i}},{{end}}
  {{$field.Name}} = '{{$field.Name}}'
{{- end}}
}
{{end -}}

{{- if .Type | isStruct  }}
export interface {{.Name | interfaceName}} {
  {{range .Fields -}}
  {{. | exportedJSONField}}{{if .Optional}}?{{end}}: {{.Type | fieldType}}
  {{end -}}

  toJSON?(): object
}

export class {{.Name}} implements {{.Name | interfaceName}} {
  private _data: {{.Name | interfaceName}}
  constructor(_data?: {{.Name | interfaceName}}) {
    this._data = {} as {{.Name | interfaceName}}
    if (_data) {
      {{range .Fields -}}
      this._data['{{. | exportedJSONField}}'] = _data['{{. | exportedJSONField}}']!
      {{end}}
    }
  }
  {{ range .Fields -}}
  public get {{. | exportedJSONField}}(): {{.Type | fieldType}} {
    return this._data['{{. | exportedJSONField }}']!
  }
  public set {{. | exportedJSONField}}(value: {{.Type | fieldType}}) {
    this._data['{{. | exportedJSONField}}'] = value
  }
  {{end}}
  public toJSON(): object {
    return this._data
  }
}
{{end -}}
{{end -}}
{{end -}}

{{if .Services}}
{{- range .Services -}}
export interface {{.Name | serviceInterfaceName}} {
  {{range .Methods -}}
    {{.Name}}({{. | methodInputs}}): {{. | methodOutputs}}
  {{end}}
}

{{range .Methods -}}
export interface {{. | methodArgumentInputInterfaceName}} {
  {{- range .Inputs}}
  {{.Name}}{{if .Optional}}?{{end}}: {{.Type | fieldType}}
  {{- end}}
}

export interface {{. | methodArgumentOutputInterfaceName}} {
  {{- range .Outputs}}
  {{.Name}}{{if .Optional}}?{{end}}: {{.Type | fieldType}}
  {{- end}}  
}
{{end}}

{{- end}}
{{end -}}
{{end}}
