{{define "client_helpers"}}
export interface WebRPCError extends Error {
  code: string
  msg: string
	status: number
}

const createHTTPRequest = (body: object = {}, headers: object = {}, signal: AbortSignal = null): object => {
  return {
    method: 'POST',
    headers: { ...headers, 'Content-Type': 'application/json' },
    body: JSON.stringify(body || {}),
    signal
  }
}

const buildResponse = (res: Response): Promise<any> => {
  const { status } = res
  return res.text().then(text => {
    let data
    try {
      if (text == "") {
        data = { status }
      } else {
        data = { ...JSON.parse(text), status }
      }
    } catch(err) {
      throw { code: 'unknown', msg: `expecting JSON, got: ${text}`, status } as WebRPCError
    }
    if (!res.ok) {
      throw data // webrpc error response
    }
    return data
  })
}

export type Fetch = (input: RequestInfo, init?: RequestInit) => Promise<Response>
{{end}}
