{{define "client"}}

{{- if .Services}}
// Client
{{range .Services}}
const {{.Name | constPathPrefix}} = "/rpc/{{.Name}}/"
{{end}}

{{- range .Services}}
export class {{.Name}} implements {{.Name | serviceInterfaceName}} {
  private hostname: string
  private fetch: Fetch
  private path = '/rpc/{{.Name}}/'

  constructor(hostname: string, fetch: Fetch) {
    this.hostname = hostname
    this.fetch = fetch
  }

  private url(name: string): string {
    return this.hostname + this.path + name
  }

  {{range .Methods}}
  {{.Name}}({{. | methodInputs}} = {}): {{. | methodOutputs}} {
    return this.fetch(
      this.url('{{.Name}}'),
      {{if .Inputs | len}}
      createHTTPRequest(args, headers)
      {{else}}
      createHTTPRequest({}, headers)
      {{end}}
    ).then((res) => {
      if (!res.ok) {
        return throwHTTPError(res)
      }
      return res.json().then((_data) => {
        return {
        {{- $outputsCount := .Outputs|len -}}
        {{- range $i, $output := .Outputs}}
          {{$output | newOutputArgResponse}}{{listComma $i $outputsCount}}
        {{- end}}
        }
      })
    })
  }
  {{end}}
}
{{end -}}

{{end -}}
{{end}}
