{{define "server"}}

{{- if .Services}}
class WebRPCError extends Error {
    constructor(msg = "error", statusCode) {
        super("webrpc eror: " + msg);

        this.statusCode = statusCode
    }
}

import express from 'express'

    {{- range .Services}}
        {{$name := .Name}}
        {{$serviceName := .Name | serviceInterfaceName}}

        export const create{{$serviceName}}App = (serviceImplementation) => {
            const app = express();

            app.use(express.json())

            app.post('/*', async (req, res) => {
                const requestPath = req.baseUrl + req.path

                if (!req.body) {
                    res.status(400).send("webrpc error: missing body");

                    return
                }

                switch(requestPath) {
                    {{range .Methods}}

                    case "/rpc/{{$name}}/{{.Name}}": {                        
                        try {
                            {{ range .Inputs }}
                                {{- if not .Optional}}
                                    if (!("{{ .Name }}" in req.body)) {
                                        throw new WebRPCError("Missing Argument `{{ .Name }}`")
                                    }
                                {{end -}}

                                if (typeof req.body["{{.Name}}"] !== "{{ .Type | jsFieldType }}") {
                                    throw new WebRPCError("Invalid arg: {{ .Name }}, got type " + typeof req.body["{{ .Name }}"] + " expected " + "{{ .Type | jsFieldType }}", 400);
                                }
                            {{end}}

                            const response = await serviceImplementation["{{.Name}}"](req.body);

                            {{ range .Outputs}}
                                if (!("{{ .Name }}" in response)) {
                                    throw new WebRPCError("internal", 500);
                                }
                            {{end}}

                            res.status(200).json(response);
                        } catch (err) {
                            if (err instanceof WebRPCError) {
                                const statusCode = err.statusCode || 400
                                const message = err.message

                                res.status(statusCode).json({
                                    msg: message,
                                    status: statusCode,
                                    code: ""
                                });

                                return
                            }

                            if (err.message) {
                                res.status(400).send(err.message);

                                return;
                            }

                            res.status(400).end();
                        }
                    }

                    return;
                    {{end}}

                    default: {
                        res.status(404).end()
                    }
                }
            });

            return app;
        };
    {{- end}}
{{end -}}
{{end}}
