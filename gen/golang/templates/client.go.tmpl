{{define "client"}}
{{if .Services}}
  // Client

  {{range .Services}}
  const {{.Name | constPathPrefix}} = "/rpc/{{.Name}}/"
  {{end}}

  {{range .Services}}
    {{ $serviceName := .Name | clientServiceName}}
    type {{$serviceName}} struct {
      client HTTPClient
      urls   [{{.Methods | countMethods}}]string
    }

    func {{.Name | newClientServiceName }}(addr string, client HTTPClient) {{.Name}} {
      prefix := urlBase(addr) + {{.Name | constPathPrefix}}
      urls := [{{.Methods | countMethods}}]string{
        {{- range .Methods}}
        prefix + "{{.Name}}",
        {{- end}}
      }
      return &{{$serviceName}}{
        client: client,
        urls:   urls,
      }
    }

    {{range $i, $method := .Methods}}
      func (c *{{$serviceName}}) {{.Name}}({{.Inputs | methodInputs}}) ({{.Outputs | methodOutputs }}) {
        {{- $inputVar := "nil" -}}
        {{- $outputVar := "nil" -}}
        {{- if .Inputs | len}}
        {{- $inputVar = "in"}}
        in := struct {
          {{- range $i, $input := .Inputs}}
            Arg{{$i}} {{$input.Type | fieldType}} `json:"{{$input.Name | downcaseName}}"`
          {{- end}}          
        }{ {{.Inputs | methodInputNames}} }
        {{- end}}
        {{- if .Outputs | len}}
        {{- $outputVar = "&out"}}
        out := struct {
          {{- range $i, $output := .Outputs}}
            Ret{{$i}} {{$output.Type | fieldType}} `json:"{{$output.Name | downcaseName}}"`
          {{- end}}          
        }{}
        {{- end}}

        err := doJSONRequest(ctx, c.client, c.urls[{{$i}}], {{$inputVar}}, {{$outputVar}})
        return {{argsList .Outputs "out.Ret"}}{{commaIfLen .Outputs}} err
      }
    {{end}}
  {{end}}
{{end}}
{{end}}
