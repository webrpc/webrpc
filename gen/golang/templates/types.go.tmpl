{{define "types"}}

{{if .Messages}}
//
// Types
//

{{range .Messages}}
  {{if .Type | isEnum}}
    {{$enumName := .Name}}
    {{$enumType := .EnumType}}
    type {{$enumName}} {{$enumType}}

    const (
      {{- range .Fields}}
        {{$enumName}}_{{.Name}} {{$enumName}} = {{.Value}}
      {{- end}}
    )

    var {{$enumName}}_name = map[{{$enumType}}]string {
      {{- range .Fields}}
        {{.Value}}: "{{.Name}}",
      {{- end}}
    }

    var {{$enumName}}_value = map[string]{{$enumType}} {
      {{- range .Fields}}
        "{{.Name}}": {{.Value}},
      {{- end}}
    }

    func (x {{$enumName}}) String() string {
      return {{$enumName}}_name[{{$enumType}}(x)]
    }

    func (x {{$enumName}}) MarshalJSON() ([]byte, error) {
      buf := bytes.NewBufferString(`"`)
      buf.WriteString({{$enumName}}_name[{{$enumType}}(x)])
      buf.WriteString(`"`)
      return buf.Bytes(), nil
    }

    func (x *{{$enumName}}) UnmarshalJSON(b []byte) error {
      var j string
      err := json.Unmarshal(b, &j)
      if err != nil {
        return err
      }
      *x = {{$enumName}}({{$enumName}}_value[j])
      return nil
    }
  {{end}}
  {{if .Type | isStruct  }}
    type {{.Name}} struct {
      {{- range .Fields}}
        {{. | exportedField}} {{. | fieldOptional}}{{. | fieldTypeDef}} {{. | fieldTags}}
      {{- end}}
    }
  {{end}}
{{end}}
{{end}}
{{if .Services}}
  {{range .Services}}
    type {{.Name}} interface {
      {{- range .Methods}}
        {{.Name}}({{.Inputs | methodInputs}}) ({{.Outputs | methodOutputs}})
      {{- end}}
    }
  {{end}}
  var WebRPCServices = map[string][]string{
    {{- range .Services}}
      "{{.Name}}": {
        {{- range .Methods}}
          "{{.Name}}",
        {{- end}}
      },
    {{- end}}
  }
{{end}}

{{end}}
