{{define "server"}}
{{if .Services}}
  // Server
  {{range .Services}}
    {{$name := .Name}}
    {{$serviceName := .Name | serverServiceName}}

    type {{$serviceName}} struct {
      {{.Name}}
    }

    func {{ .Name | newServerServiceName }}(svc {{.Name}}) WebRPCServer {
      return &{{$serviceName}}{
        {{.Name}}: svc,
      }
    }


    func (s *{{$serviceName}}) WebRPCVersion() string {
      return "v0.0.1"
    }

    func (s *{{$serviceName}}) ServiceVersion() string {
      return "v0.1.0"
    }

    func (s *exampleServiceServer) ServeHTTP(w http.ResponseWriter, r *http.Request) {
      ctx := r.Context()
      ctx = webrpc.WithResponseWriter(ctx, w)
      ctx = webrpc.WithServiceName(ctx, "ExampleService")

      if r.Method != "POST" {
        err := webrpc.Errorf(webrpc.ErrBadRoute, "unsupported method %q (only POST is allowed)", r.Method)
        writeJSONError(ctx, w, r, err)
        return
      }

      switch r.URL.Path {
      {{range .Methods}}
      case "/rpc/{{$name}}/{{.Name}}":
        s.{{.Name | serviceMethodName}}(ctx, w, r)
        return
      {{end}}
      default:
        err := webrpc.Errorf(webrpc.ErrBadRoute, "no handler for path %q", r.URL.Path)
        writeJSONError(ctx, w, r, err)
        return
      }
    }

    {{range .Methods}}
      func (s *{{$serviceName}}) {{.Name | serviceMethodName}}(ctx context.Context, w http.ResponseWriter, r *http.Request) {
        header := r.Header.Get("Content-Type")
        i := strings.Index(header, ";")
        if i == -1 {
          i = len(header)
        }

        switch strings.TrimSpace(strings.ToLower(header[:i])) {
        case "application/json":
          s.{{ .Name | serviceMethodJSONName }}(ctx, w, r)
        default:
          err := webrpc.Errorf(webrpc.ErrBadRoute, "unexpected Content-Type: %q", r.Header.Get("Content-Type"))
          writeJSONError(ctx, w, r, err)
        }
      }

      func (s *{{$serviceName}}) {{.Name | serviceMethodJSONName}}(ctx context.Context, w http.ResponseWriter, r *http.Request) {
        var err error
        ctx = webrpc.WithMethodName(ctx, "{{.Name}}")

        {{if .Inputs|len}}

        {{range .Inputs}}
        reqContent := new({{.Type | fieldType}})
        {{end}}

        reqBody, err := ioutil.ReadAll(r.Body)
        if err != nil {
          err = webrpc.WrapError(webrpc.ErrInternal, err, "failed to read request data")
          writeJSONError(ctx, w, r, err)
          return
        }
        defer r.Body.Close()

        err = json.Unmarshal(reqBody, reqContent)
        if err != nil {
          err = webrpc.WrapError(webrpc.ErrInternal, err, "failed to unmarshal request data")
          writeJSONError(ctx, w, r, err)
          return
        }
        {{end}}

        // Call service method
        {{range .Outputs}}
        var respContent *{{.Type | fieldType}}
        {{end}}
        func() {
          defer func() {
            // In case of a panic, serve a 500 error and then panic.
            if rr := recover(); rr != nil {
              writeJSONError(ctx, w, r, webrpc.ErrorInternal("internal service panic"))
              panic(rr)
            }
          }()
          {{if .Inputs|len}}
          respContent, err = s.{{$name}}.{{.Name}}(ctx, reqContent)
          {{else}}
          respContent, err = s.{{$name}}.{{.Name}}(ctx)
          {{end}}
        }()

        if err != nil {
          writeJSONError(ctx, w, r, err)
          return
        }

        respBody, err := json.Marshal(respContent)
        if err != nil {
          err = webrpc.WrapError(webrpc.ErrInternal, err, "failed to marshal json response")
          writeJSONError(ctx, w, r, err)
          return
        }

        w.Header().Set("Content-Type", "application/json")
        w.WriteHeader(http.StatusOK)

        if n, err := w.Write(respBody); err != nil {
          _ = n
          _ = err
          // TODO: failing silently for now..
          // msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
        }
      }
    {{end}}
  {{end}}
{{end}}
{{end}}
